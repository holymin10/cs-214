Script started on 2023-01-30 20:12:46-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ cat LogTable.java
/* LogTable.java displays a table of logarithms.
 *
 * Input: start, stop and increment, three doubles.
 * PRE: start < stop && increment > 0.
 * Output: A table of logarithms from start to stop,
 *         with increment as the step value.
 * Begun by: Nelesen, for CS 214 at Calvin College.
 * Completed by:
 ********************************************************/
import java.util.Scanner; 		// Get input

class LogTable{

  public static void main(String[] args){
    Scanner keyboard = new Scanner(System.in);
    System.out.println("To display a table of logarithms,");
    System.out.println("enter the start, stop and increment values: ");
    double start, stop, increment;
    start = keyboard.nextDouble();
    stop = keyboard.nextDouble();
    increment = keyboard.nextDouble();


while (start <= stop) {
System.out.println ("Log of " + start + ": " + Math.log10(start));  
start = start + increment;
}

  }
}

]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ javac -deprecation LogtT  Table.java
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ java l LogTable.java
error: class found on application class path: LogTable
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ java LogTable.java     
To display a table of logarithms,
enter the start, stop and increment values: 
1
10
0.5
Log of 1.0: 0.0
Log of 1.5: 0.17609125905568124
Log of 2.0: 0.3010299956639812
Log of 2.5: 0.3979400086720376
Log of 3.0: 0.47712125471966244
Log of 3.5: 0.5440680443502757
Log of 4.0: 0.6020599913279624
Log of 4.5: 0.6532125137753437
Log of 5.0: 0.6989700043360189
Log of 5.5: 0.7403626894942439
Log of 6.0: 0.7781512503836436
Log of 6.5: 0.8129133566428556
Log of 7.0: 0.8450980400142568
Log of 7.5: 0.8750612633917001
Log of 8.0: 0.9030899869919435
Log of 8.5: 0.9294189257142927
Log of 9.0: 0.9542425094393249
Log of 9.5: 0.9777236052888477
Log of 10.0: 1.0
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ exit
exit

Script done on 2023-01-30 20:13:34-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-01-30 20:33:24-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ s cat     exit./log_table.adb[7@gnatmake log_table.adb[5Pcat log_table.adb
-- log_table.adb computes a table of logarithms.
--
-- Input: start, stop, increment, three reals.
-- Precondition: increment is positive.
-- Output: A table of logarithms beginning with log(start),
--         ending with log(stop), with intervals of increment.
--
-- Begun by: Prof. Adams, for CS 214 at Calvin College.
-- Completed by: Sungmin Choi (sc94)
--------------------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO, Ada.Numerics.Elementary_Functions;
use  Ada.Text_IO, Ada.Float_Text_IO, Ada.Numerics.Elementary_Functions;

procedure log_table is

   Start, Stop, Increment : Float;

begin                                           -- Prompt for input
   Put_Line("To print a table of logarithms,");
   Put(" enter the start, stop, and increment values: ");
   Get(Start); Get(Stop); Get(Increment);

   while start <= Stop loop
      Put("The logarithm of");
      Put(Start);
      Put(" is");
      Put( log(Start, 10.0) );
      New_line;
      Start := Start + Increment;
   end loop;

end log_table;

]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ cat log_table.adbexit[K./log_table.adb[7@gnatmake log_table.adb[5Pcat log_table.adbscript script.java[1Pcat log_table.adb[5@gnatmake log_table.adb[7P./log_table.adb[7@gnatmake log_table.adb[5Pcat log_table.adb[5@gnatmake log_table.adb
x86_64-linux-gnu-gcc-7 -c log_table.adb
x86_64-linux-gnu-gnatbind-7 -x log_table.ali
x86_64-linux-gnu-gnatlink-7 log_table.ali
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ gnatmake log_table.adb[5Pcat log_table.adbexit[Kcat log_table.adb[5@gnatmake log_table.adb[5Pcat log_table.adbexit[K./log_table
To print a table of logarithms,
 enter the start, stop, and increment values: 1
10
0.5
The logarithm of 1.00000E+00 is 0.00000E+00
The logarithm of 1.50000E+00 is 1.76091E-01
The logarithm of 2.00000E+00 is 3.01030E-01
The logarithm of 2.50000E+00 is 3.97940E-01
The logarithm of 3.00000E+00 is 4.77121E-01
The logarithm of 3.50000E+00 is 5.44068E-01
The logarithm of 4.00000E+00 is 6.02060E-01
The logarithm of 4.50000E+00 is 6.53212E-01
The logarithm of 5.00000E+00 is 6.98970E-01
The logarithm of 5.50000E+00 is 7.40363E-01
The logarithm of 6.00000E+00 is 7.78151E-01
The logarithm of 6.50000E+00 is 8.12913E-01
The logarithm of 7.00000E+00 is 8.45098E-01
The logarithm of 7.50000E+00 is 8.75061E-01
The logarithm of 8.00000E+00 is 9.03090E-01
The logarithm of 8.50000E+00 is 9.29419E-01
The logarithm of 9.00000E+00 is 9.54243E-01
The logarithm of 9.50000E+00 is 9.77724E-01
The logarithm of 1.00000E+01 is 1.00000E+00
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ exit
exit

Script done on 2023-01-30 20:35:50-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-01-30 21:34:07-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
cat]0;sc94@maroon03: ~/214/labs/04/clojure[01;32msc94@maroon03[00m:[01;34m~/214/labs/04/clojure[00m$ cat src/logTable.clj
;;;; logTable.clj displays a table of logarithms.
;;;;
;;;; Input: start, stop and increment, three numbers.
;;;; Precondition: start < stop && increment > 0.
;;;; Output: A table of logarithms from start to stop,
;;;;          with interval of increment.
;;;;
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Sungmin Choi (sc94)
;;;; Date: Jan 30, 2023
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns logTable)                                 ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayLogTable() recursively generates the log-table.
;;; Receive: start the first value for the table;
;;;          stop, the last  value for the table;
;;;           step, the step value for the table;
;;; Precondition: start < stop && increment > 0.
;;; Output: The table of logs from start to stop, by step.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; direct-recursive version

; replace this line with the definition of displayLogTable().
(defn displayLogTable[start, stop, step]
(if(<= start stop)
(do
(printf "The logarithm of %f is %f\n" start (Math/log10 start))
(displayLogTable(+ start step)stop step)
)
))
;; loop (indirect-recursion) version
(defn displayLogTable2 [start stop step]
  (loop [i start]                           ; set i to start
    (when (<= i stop)                       ; if i <= stop:
      (printf "The logarithm of %f is %f\n" ;  print one line
                  i (Math/log10 i)
      )
      (recur (+ i step))                    ; recurse, i += step
    )
  )
)

;; indirect/tail-recursive version (just using recur)
(defn displayLogTable3 [start stop step]
  (if (<= start stop)                     ; if start <= stop:
    (do                                      ; do these two things:
      (printf "The logarithm of %f is %f\n"  ; - print one line
                  start (Math/log10 start)
      )
      (recur (+ start step) stop step)       ; - recurse, start+=step
    )
  )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -main is a 'driver' for the displayLogTable() functions.
;;; Input: start, stop and increment.
;;; Output: The table of logarithms 
;;;          from start to stop by increment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []
 (println "To display a table of logarithms,")
 (print " enter the start, stop, and increment values: ") (flush)
 (let
    [ start (double (read))
      stop (double (read))
      increment (double (read))
    ] 
    (println)
    (displayLogTable start stop increment) 
    (println)
   (displayLogTable2 start stop increment) 
   (println)
    (displayLogTable3 start stop increment) 
    (println)
 )
)

]0;sc94@maroon03: ~/214/labs/04/clojure[01;32msc94@maroon03[00m:[01;34m~/214/labs/04/clojure[00m$ clojure -, m logTable.clj    
To display a table of logarithms,
 enter the start, stop, and increment values: 1
10
0.5

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

]0;sc94@maroon03: ~/214/labs/04/clojure[01;32msc94@maroon03[00m:[01;34m~/214/labs/04/clojure[00m$ exit
exit

Script done on 2023-01-30 21:34:52-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-01-30 20:55:56-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ cat log_ta  Tab    Table.rb
#! /usr/bin/ruby
# logTable.rb displays a table of logarithms
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by:
#
# Input:  The start, stop and increment values
# Precondition: The start value is less than the stop value, 
#     and the increment is greater than 0
# Output: A table of logarithms from start to stop, with increment
#     as the step value


if __FILE__ == $0
   print "Enter the start value: "
#### ADD CODE HERE TO GET THESE VALUES AS NUMBERS
start = gets
start = start.to_f
   print "Enter the stop value: "
####
stop = gets
stop = stop.to_f
   print "Enter the increment value: "
####   
increment = gets
increment = increment.to_f
   
   while start <= stop 
      puts "The logarithm of #{start} is #{Math.log10(start)}"
      start = start + increment
   end  
end

]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ cat logTable.rbexit[K./log_table           ruby logTable.rb
Enter the start value: 1
Enter the stop value: 10
Enter the increment value: 0.5
The logarithm of 1.0 is 0.0
The logarithm of 1.5 is 0.17609125905568124
The logarithm of 2.0 is 0.3010299956639812
The logarithm of 2.5 is 0.3979400086720376
The logarithm of 3.0 is 0.47712125471966244
The logarithm of 3.5 is 0.5440680443502757
The logarithm of 4.0 is 0.6020599913279624
The logarithm of 4.5 is 0.6532125137753437
The logarithm of 5.0 is 0.6989700043360189
The logarithm of 5.5 is 0.7403626894942439
The logarithm of 6.0 is 0.7781512503836436
The logarithm of 6.5 is 0.8129133566428556
The logarithm of 7.0 is 0.8450980400142568
The logarithm of 7.5 is 0.8750612633917001
The logarithm of 8.0 is 0.9030899869919435
The logarithm of 8.5 is 0.9294189257142927
The logarithm of 9.0 is 0.9542425094393249
The logarithm of 9.5 is 0.9777236052888477
The logarithm of 10.0 is 1.0
]0;sc94@maroon03: ~/214/labs/04[01;32msc94@maroon03[00m:[01;34m~/214/labs/04[00m$ ruby logTable.rb                exit
exit

Script done on 2023-01-30 20:56:34-05:00 [COMMAND_EXIT_CODE="0"]
