Script started on 2023-02-06 20:33:59-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;sc94@maroon14: ~/214/labs/05/extraCredit[01;32msc94@maroon14[00m:[01;34m~/214/labs/05/extraCredit[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=>    (map inc [1 2 3 4][1 2 3 4])user=>    (map inc [1 2 3 4])user=> [K[K   (map - [1 2 3 4][1 2 3 4][K   (map inc [1 2 3 4])
[K   (map - [1 2 3 4])   (map - [1 2 3 4])[K[K   (map - [1 2 3 4][1 2 3 4][K   (map - [1 2 3 4])
[K   (map - [1 2 3 4] [1 2 3 4][1 2 3 4])   (map - [1 2 3 4] [1 2 3 4])[K[K   (map even? [1 2 3 4][1 2 3 4][K   (map - [1 2 3 4] [1 2 3 4])
[K   (map even? [1 2 3 4])   (map even? [1 2 3 4])[K[K   (map str ["a" "b" "c"]["a" "b" "c"][K   (map even? [1 2 3 4])
[K   (map str ["a" "b" "c"] ["A" "B" "C"]["A" "B" "C"])   (map str ["a" "b" "c"] ["A" "B" "C"])[K[K   (map count [[11][11][K   (map str ["a" "b" "c"] ["A" "B" "C"])
[K   (map count [[11] [11 22][11 22] [11 22 33][11 22 33]]   (map count [[11] [11 22] [11 22 33]])   (map count [[11] [11 22] [11 22 33]])[K(2 3 4 5)
user=> (-1 -2 -3 -4)
user=> (0 0 0 0)
user=> (false true false true)
user=> ("aA" "bB" "cC")
user=> [Kuser=>    (map count [[11] [11 22] [11 22 33]])user=> [K   (map count [[11] [11 22] [11 22 33]])
(1 2 3)
user=> [Kuser=> [Kuser=> (map + [1 2 3 4][1 2 3 4] [1 2 3 4][1 2 3 4])user=> (map + [1 2 3 4] [1 2 3 4])user=> [K[K   (map * [1 2 3 4][1 2 3 4][K(map + [1 2 3 4] [1 2 3 4])
[K   (map * [1 2 3 4] [1 2 3 4][1 2 3 4])   (map * [1 2 3 4] [1 2 3 4])[K(2 4 6 8)
user=> [Kuser=>    (map * [1 2 3 4] [1 2 3 4])user=> [K   (map * [1 2 3 4] [1 2 3 4])
(1 4 9 16)
user=> [Kuser=> [Kuser=> (Math/abs -3)user=> (Math/abs -3)user=> [K[K   (map Math/abs [-1 2 -3 4 -5][-1 2 -3 4 -5][K(Math/abs -3)
[K   (map Math/abs [-1 2 -3 4 -5])   (map Math/abs [-1 2 -3 4 -5])[K3
user=> [Kuser=>    (map Math/abs [-1 2 -3 4 -5])user=> [K   (map Math/abs [-1 2 -3 4 -5])
Syntax error compiling at (REPL:1:1).
Unable to find static field: abs in class java.lang.Math
user=> [Kuser=> [Kuser=> (map (fn [x][x] (if (< x 0)(< x 0) (- x)(- x) x)(if (< x 0) (- x) x))user=> (map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5][-1 2 -3 4 -5])user=> (map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])user=> [K(map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])
[K(1 2 3 4 5)
user=> [Kuser=> [Kuser=>    (defn subtract-n [n sequence][n sequence]user=> [K[K   [K   (defn subtract-n [n sequence]
[K   (map (fn [x][x] (- x n)(- x n))   (map (fn [x] (- x n)) sequence)   (map (fn [x] (- x n)) sequence)[K[K   )[K   (map (fn [x] (- x n)) sequence)
[K   )[K   )
#'user/subtract-n
user=> [Kuser=> [Kuser=> (subtract-n 2 [5 6 7 8][5 6 7 8])user=> (subtract-n 2 [5 6 7 8])user=> [K(subtract-n 2 [5 6 7 8])
(3 4 5 6)
user=> [Kuser=> [Kuser=>  (filter odd? [1 2 3 4][1 2 3 4])user=>  (filter odd? [1 2 3 4])user=> [K[K   (filter even? [1 2 3 4][1 2 3 4][K (filter odd? [1 2 3 4])
[K   (filter even? [1 2 3 4])   (filter even? [1 2 3 4])[K[K   (filter neg? [1 2 3 4][1 2 3 4][K   (filter even? [1 2 3 4])
[K   (filter neg? [1 2 3 4][K(1 3)
user=> (2 4)
user=> [Kuser=>    (filter neg? [1 2 3 4])user=>    (filter neg? [1 2 3 4])user=> [K[K   (filter neg? [-1 1 -2 2 -3 3][-1 1 -2 2 -3 3][K   (filter neg? [1 2 3 4])
[K   (filter neg? [-1 1 -2 2 -3 3][K()
user=> [Kuser=>    (filter neg? [-1 1 -2 2 -3 3])user=>    (filter neg? [-1 1 -2 2 -3 3])user=> [K[K   (filter pos?  [-1 1 -2 2 -3 3][-1 1 -2 2 -3 3][K   (filter neg? [-1 1 -2 2 -3 3])
[K   (filter pos?  [-1 1 -2 2 -3 3][K(-1 -2 -3)
user=> [Kuser=>    (filter pos?  [-1 1 -2 2 -3 3])user=>    (filter pos?  [-1 1 -2 2 -3 3])user=> [K   (filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=> 
user=> [Kuser=> [Kuser=> (filter (fn [x][x] (and (pos? x)(pos? x) (even? x)(even? x))(and (pos? x) (even? x)))user=> (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4][-1 1 -2 2 -3 3 -4 4])user=> (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])user=> [K(filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])
(2 4)
user=> [Kuser=> [Kuser=> [-1 1 -2 2 -3 3 -4 4]user=> [-1 1 -2 2 -3 3 -4 4]user=> [K[-1 1 -2 2 -3 3 -4 4]
[-1 1 -2 2 -3 3 -4 4]
user=> [Kuser=> [Kuser=> 
[K]0;sc94@maroon14: ~/214/labs/05/extraCredit[01;32msc94@maroon14[00m:[01;34m~/214/labs/05/extraCredit[00m$ exit

Script done on 2023-02-06 20:35:56-05:00 [COMMAND_EXIT_CODE="0"]
